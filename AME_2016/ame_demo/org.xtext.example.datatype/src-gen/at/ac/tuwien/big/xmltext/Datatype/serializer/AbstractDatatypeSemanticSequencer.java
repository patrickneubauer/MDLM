/*
 * generated by Xtext
 */
package at.ac.tuwien.big.xmltext.Datatype.serializer;

import Datatype.CustomerType;
import Datatype.DatatypePackage;
import Datatype.LibraryType;
import at.ac.tuwien.big.xmltext.Datatype.services.DatatypeGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;

@SuppressWarnings("all")
public abstract class AbstractDatatypeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DatatypeGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == DatatypePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case DatatypePackage.CUSTOMER_TYPE:
				sequence_CustomerType(context, (CustomerType) semanticObject); 
				return; 
			case DatatypePackage.LIBRARY_TYPE:
				sequence_LibraryType(context, (LibraryType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         firstName=String0 
	 *         lastName=String0 
	 *         birthDate=Date 
	 *         birthTime=Time 
	 *         dateTime=DateTime? 
	 *         age=Integer 
	 *         prize=Decimal 
	 *         disabled=Boolean
	 *     )
	 */
	protected void sequence_CustomerType(EObject context, CustomerType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((customer+=CustomerType customer+=CustomerType*)?)
	 */
	protected void sequence_LibraryType(EObject context, LibraryType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
