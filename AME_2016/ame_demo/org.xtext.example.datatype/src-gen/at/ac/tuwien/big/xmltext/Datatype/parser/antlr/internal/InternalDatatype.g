/*
 * generated by Xtext
 */
grammar InternalDatatype;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.ac.tuwien.big.xmltext.Datatype.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.ac.tuwien.big.xmltext.Datatype.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.ac.tuwien.big.xmltext.Datatype.services.DatatypeGrammarAccess;

}

@parser::members {

 	private DatatypeGrammarAccess grammarAccess;
 	
    public InternalDatatypeParser(TokenStream input, DatatypeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "LibraryType";	
   	}
   	
   	@Override
   	protected DatatypeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleLibraryType
entryRuleLibraryType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryTypeRule()); }
	 iv_ruleLibraryType=ruleLibraryType 
	 { $current=$iv_ruleLibraryType.current; } 
	 EOF 
;

// Rule LibraryType
ruleLibraryType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLibraryTypeAccess().getLibraryTypeAction_0(),
            $current);
    }
)	otherlv_1='LibraryType' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLibraryTypeAccess().getLibraryTypeKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLibraryTypeAccess().getLeftSquareBracketKeyword_2());
    }
(	otherlv_3='customer' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLibraryTypeAccess().getCustomerKeyword_3_0());
    }
	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLibraryTypeAccess().getLeftSquareBracketKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryTypeAccess().getCustomerCustomerTypeParserRuleCall_3_2_0()); 
	    }
		lv_customer_5_0=ruleCustomerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryTypeRule());
	        }
       		add(
       			$current, 
       			"customer",
        		lv_customer_5_0, 
        		"CustomerType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLibraryTypeAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryTypeAccess().getCustomerCustomerTypeParserRuleCall_3_3_1_0()); 
	    }
		lv_customer_7_0=ruleCustomerType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryTypeRule());
	        }
       		add(
       			$current, 
       			"customer",
        		lv_customer_7_0, 
        		"CustomerType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLibraryTypeAccess().getRightSquareBracketKeyword_3_4());
    }
)?	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLibraryTypeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleCustomerType
entryRuleCustomerType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustomerTypeRule()); }
	 iv_ruleCustomerType=ruleCustomerType 
	 { $current=$iv_ruleCustomerType.current; } 
	 EOF 
;

// Rule CustomerType
ruleCustomerType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CustomerType' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCustomerTypeAccess().getCustomerTypeKeyword_0());
    }
	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCustomerTypeAccess().getLeftSquareBracketKeyword_1());
    }
	otherlv_2='firstName' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCustomerTypeAccess().getFirstNameKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomerTypeAccess().getFirstNameString0ParserRuleCall_3_0()); 
	    }
		lv_firstName_3_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomerTypeRule());
	        }
       		set(
       			$current, 
       			"firstName",
        		lv_firstName_3_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='lastName' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCustomerTypeAccess().getLastNameKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomerTypeAccess().getLastNameString0ParserRuleCall_5_0()); 
	    }
		lv_lastName_5_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomerTypeRule());
	        }
       		set(
       			$current, 
       			"lastName",
        		lv_lastName_5_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='birthDate' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCustomerTypeAccess().getBirthDateKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomerTypeAccess().getBirthDateDateParserRuleCall_7_0()); 
	    }
		lv_birthDate_7_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomerTypeRule());
	        }
       		set(
       			$current, 
       			"birthDate",
        		lv_birthDate_7_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='birthTime' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCustomerTypeAccess().getBirthTimeKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomerTypeAccess().getBirthTimeTimeParserRuleCall_9_0()); 
	    }
		lv_birthTime_9_0=ruleTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomerTypeRule());
	        }
       		set(
       			$current, 
       			"birthTime",
        		lv_birthTime_9_0, 
        		"Time");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10='dateTime' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCustomerTypeAccess().getDateTimeKeyword_10_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomerTypeAccess().getDateTimeDateTimeParserRuleCall_10_1_0()); 
	    }
		lv_dateTime_11_0=ruleDateTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomerTypeRule());
	        }
       		set(
       			$current, 
       			"dateTime",
        		lv_dateTime_11_0, 
        		"DateTime");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_12='age' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getCustomerTypeAccess().getAgeKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomerTypeAccess().getAgeIntegerParserRuleCall_12_0()); 
	    }
		lv_age_13_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomerTypeRule());
	        }
       		set(
       			$current, 
       			"age",
        		lv_age_13_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='prize' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getCustomerTypeAccess().getPrizeKeyword_13());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomerTypeAccess().getPrizeDecimalParserRuleCall_14_0()); 
	    }
		lv_prize_15_0=ruleDecimal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomerTypeRule());
	        }
       		set(
       			$current, 
       			"prize",
        		lv_prize_15_0, 
        		"Decimal");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16='disabled' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getCustomerTypeAccess().getDisabledKeyword_15());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomerTypeAccess().getDisabledBooleanParserRuleCall_16_0()); 
	    }
		lv_disabled_17_0=ruleBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomerTypeRule());
	        }
       		set(
       			$current, 
       			"disabled",
        		lv_disabled_17_0, 
        		"Boolean");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18=']' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getCustomerTypeAccess().getRightSquareBracketKeyword_17());
    }
)
;





// Entry rule entryRuleString0
entryRuleString0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getString0Rule()); } 
	 iv_ruleString0=ruleString0 
	 { $current=$iv_ruleString0.current.getText(); }  
	 EOF 
;

// Rule String0
ruleString0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getString0Access().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleDate
entryRuleDate returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); } 
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current.getText(); }  
	 EOF 
;

// Rule Date
ruleDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDateAccess().getINTTerminalRuleCall_0()); 
    }

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDateAccess().getHyphenMinusKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDateAccess().getINTTerminalRuleCall_2()); 
    }

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDateAccess().getHyphenMinusKeyword_3()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getDateAccess().getINTTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleTime
entryRuleTime returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeRule()); } 
	 iv_ruleTime=ruleTime 
	 { $current=$iv_ruleTime.current.getText(); }  
	 EOF 
;

// Rule Time
ruleTime returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getTimeAccess().getINTTerminalRuleCall_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeAccess().getColonKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getTimeAccess().getINTTerminalRuleCall_2()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeAccess().getColonKeyword_3()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getTimeAccess().getINTTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleDateTime
entryRuleDateTime returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateTimeRule()); } 
	 iv_ruleDateTime=ruleDateTime 
	 { $current=$iv_ruleDateTime.current.getText(); }  
	 EOF 
;

// Rule DateTime
ruleDateTime returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DateTime' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDateTimeAccess().getDateTimeKeyword()); 
    }

    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getIntegerAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleDecimal
entryRuleDecimal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalRule()); } 
	 iv_ruleDecimal=ruleDecimal 
	 { $current=$iv_ruleDecimal.current.getText(); }  
	 EOF 
;

// Rule Decimal
ruleDecimal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDecimalAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDecimalAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


