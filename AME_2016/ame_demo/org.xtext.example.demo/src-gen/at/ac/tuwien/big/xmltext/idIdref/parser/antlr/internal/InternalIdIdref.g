/*
 * generated by Xtext
 */
grammar InternalIdIdref;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.ac.tuwien.big.xmltext.idIdref.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.ac.tuwien.big.xmltext.idIdref.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.ac.tuwien.big.xmltext.idIdref.services.IdIdrefGrammarAccess;

}

@parser::members {

 	private IdIdrefGrammarAccess grammarAccess;
 	
    public InternalIdIdrefParser(TokenStream input, IdIdrefGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "EmployeeListType";	
   	}
   	
   	@Override
   	protected IdIdrefGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleEmployeeListType
entryRuleEmployeeListType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmployeeListTypeRule()); }
	 iv_ruleEmployeeListType=ruleEmployeeListType 
	 { $current=$iv_ruleEmployeeListType.current; } 
	 EOF 
;

// Rule EmployeeListType
ruleEmployeeListType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEmployeeListTypeAccess().getEmployeeListTypeAction_0(),
            $current);
    }
)	otherlv_1='EmployeeListType' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmployeeListTypeAccess().getEmployeeListTypeKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEmployeeListTypeAccess().getLeftSquareBracketKeyword_2());
    }
(	otherlv_3='boss' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEmployeeListTypeAccess().getBossKeyword_3_0());
    }
	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEmployeeListTypeAccess().getLeftSquareBracketKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmployeeListTypeAccess().getBossBossTypeParserRuleCall_3_2_0()); 
	    }
		lv_boss_5_0=ruleBossType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmployeeListTypeRule());
	        }
       		add(
       			$current, 
       			"boss",
        		lv_boss_5_0, 
        		"BossType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEmployeeListTypeAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmployeeListTypeAccess().getBossBossTypeParserRuleCall_3_3_1_0()); 
	    }
		lv_boss_7_0=ruleBossType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmployeeListTypeRule());
	        }
       		add(
       			$current, 
       			"boss",
        		lv_boss_7_0, 
        		"BossType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEmployeeListTypeAccess().getRightSquareBracketKeyword_3_4());
    }
)?(	otherlv_9='employee' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getEmployeeListTypeAccess().getEmployeeKeyword_4_0());
    }
	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getEmployeeListTypeAccess().getLeftSquareBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmployeeListTypeAccess().getEmployeeEmployeeTypeParserRuleCall_4_2_0()); 
	    }
		lv_employee_11_0=ruleEmployeeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmployeeListTypeRule());
	        }
       		add(
       			$current, 
       			"employee",
        		lv_employee_11_0, 
        		"EmployeeType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getEmployeeListTypeAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmployeeListTypeAccess().getEmployeeEmployeeTypeParserRuleCall_4_3_1_0()); 
	    }
		lv_employee_13_0=ruleEmployeeType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmployeeListTypeRule());
	        }
       		add(
       			$current, 
       			"employee",
        		lv_employee_13_0, 
        		"EmployeeType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14=']' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getEmployeeListTypeAccess().getRightSquareBracketKeyword_4_4());
    }
)?	otherlv_15=']' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getEmployeeListTypeAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleBossType
entryRuleBossType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBossTypeRule()); }
	 iv_ruleBossType=ruleBossType 
	 { $current=$iv_ruleBossType.current; } 
	 EOF 
;

// Rule BossType
ruleBossType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='BossType' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBossTypeAccess().getBossTypeKeyword_0());
    }
	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBossTypeAccess().getLeftSquareBracketKeyword_1());
    }
	otherlv_2='lastName' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBossTypeAccess().getLastNameKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBossTypeAccess().getLastNameString0ParserRuleCall_3_0()); 
	    }
		lv_lastName_3_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBossTypeRule());
	        }
       		set(
       			$current, 
       			"lastName",
        		lv_lastName_3_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='birthDate' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBossTypeAccess().getBirthDateKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBossTypeAccess().getBirthDateDateParserRuleCall_5_0()); 
	    }
		lv_birthDate_5_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBossTypeRule());
	        }
       		set(
       			$current, 
       			"birthDate",
        		lv_birthDate_5_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='superBoss' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBossTypeAccess().getSuperBossKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBossTypeRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getBossTypeAccess().getSuperBossIdValuesCrossReference_7_0()); 
	}

)
)	otherlv_8='bossId' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBossTypeAccess().getBossIdKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBossTypeAccess().getBossIdIdValuesParserRuleCall_9_0()); 
	    }
		lv_bossId_9_0=ruleIdValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBossTypeRule());
	        }
       		set(
       			$current, 
       			"bossId",
        		lv_bossId_9_0, 
        		"IdValues");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getBossTypeAccess().getRightSquareBracketKeyword_10());
    }
)
;





// Entry rule entryRuleEmployeeType
entryRuleEmployeeType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmployeeTypeRule()); }
	 iv_ruleEmployeeType=ruleEmployeeType 
	 { $current=$iv_ruleEmployeeType.current; } 
	 EOF 
;

// Rule EmployeeType
ruleEmployeeType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='EmployeeType' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEmployeeTypeAccess().getEmployeeTypeKeyword_0());
    }
	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEmployeeTypeAccess().getLeftSquareBracketKeyword_1());
    }
	otherlv_2='lastName' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEmployeeTypeAccess().getLastNameKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmployeeTypeAccess().getLastNameString0ParserRuleCall_3_0()); 
	    }
		lv_lastName_3_0=ruleString0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmployeeTypeRule());
	        }
       		set(
       			$current, 
       			"lastName",
        		lv_lastName_3_0, 
        		"String0");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='birthDate' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEmployeeTypeAccess().getBirthDateKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmployeeTypeAccess().getBirthDateDateParserRuleCall_5_0()); 
	    }
		lv_birthDate_5_0=ruleDate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmployeeTypeRule());
	        }
       		set(
       			$current, 
       			"birthDate",
        		lv_birthDate_5_0, 
        		"Date");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='boss' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEmployeeTypeAccess().getBossKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEmployeeTypeRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getEmployeeTypeAccess().getBossIdValuesCrossReference_7_0()); 
	}

)
)	otherlv_8='employeeId' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEmployeeTypeAccess().getEmployeeIdKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmployeeTypeAccess().getEmployeeIdIdValuesParserRuleCall_9_0()); 
	    }
		lv_employeeId_9_0=ruleIdValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmployeeTypeRule());
	        }
       		set(
       			$current, 
       			"employeeId",
        		lv_employeeId_9_0, 
        		"IdValues");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getEmployeeTypeAccess().getRightSquareBracketKeyword_10());
    }
)
;





// Entry rule entryRuleString0
entryRuleString0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getString0Rule()); } 
	 iv_ruleString0=ruleString0 
	 { $current=$iv_ruleString0.current.getText(); }  
	 EOF 
;

// Rule String0
ruleString0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getString0Access().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleIdValues
entryRuleIdValues returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdValuesRule()); }
	 iv_ruleIdValues=ruleIdValues 
	 { $current=$iv_ruleIdValues.current; } 
	 EOF 
;

// Rule IdValues
ruleIdValues returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIdValuesAccess().getIdValuesAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIdValuesAccess().getNameID0ParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleID0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdValuesRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID0");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDate
entryRuleDate returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDateRule()); } 
	 iv_ruleDate=ruleDate 
	 { $current=$iv_ruleDate.current.getText(); }  
	 EOF 
;

// Rule Date
ruleDate returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDateAccess().getINTTerminalRuleCall_0()); 
    }

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDateAccess().getHyphenMinusKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDateAccess().getINTTerminalRuleCall_2()); 
    }

	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDateAccess().getHyphenMinusKeyword_3()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getDateAccess().getINTTerminalRuleCall_4()); 
    }
)
    ;





// Entry rule entryRuleID0
entryRuleID0 returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getID0Rule()); } 
	 iv_ruleID0=ruleID0 
	 { $current=$iv_ruleID0.current.getText(); }  
	 EOF 
;

// Rule ID0
ruleID0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getID0Access().getIDTerminalRuleCall()); 
    }

    ;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


